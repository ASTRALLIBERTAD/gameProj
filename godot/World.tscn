[gd_scene load_steps=16 format=3 uid="uid://d2oibegpqmv2b"]

[ext_resource type="Texture2D" uid="uid://eao47njq38uu" path="res://Assets/brackeys_platformer_assets/brackeys_platformer_assets/sprites/world_tileset.png" id="1_cy2ln"]
[ext_resource type="Texture2D" uid="uid://dvfmmac5i680p" path="res://Assets/Hana Caraka - Topdown Tileset [sample]/Tileset/Dirt - simplified.png" id="2_tn3g8"]
[ext_resource type="Texture2D" uid="uid://dcxxui0j4nb2o" path="res://Assets/Hana Caraka - Topdown Tileset [sample]/Tileset/Winter - simplified.png" id="3_7vh7w"]
[ext_resource type="PackedScene" uid="uid://v2h65dti34ep" path="res://Collectibles/coin.tscn" id="3_q1b1f"]
[ext_resource type="PackedScene" uid="uid://cf1y4gylaktvs" path="res://TouchControls.tscn" id="4_dd45r"]
[ext_resource type="PackedScene" uid="uid://bpi3sbit45l5" path="res://Player/players.tscn" id="4_dqyd3"]
[ext_resource type="Script" path="res://FpsCounter.gd" id="5_dged2"]
[ext_resource type="Texture2D" uid="uid://djo53ep2hv88p" path="res://icon.svg" id="7_6ip7a"]

[sub_resource type="GDScript" id="GDScript_ixdq0"]
script/source = "extends Node2D

@export var noise_texture: NoiseTexture2D 


@export var render_distance = 4
@onready var tile_set = $TileMap
var noise = FastNoiseLite.new()

@onready var player = $PLAYERS

var tile_size: int = 32
var chunk_size: int = 50
var view_distance: int = 16

var loaded_chunks = {}
var chunk_nodes = {}

var source_id = 0
var land = Vector2i(1, 1)
var water = Vector2i(0, 11)
var cloud = Vector2i(3, 9)
var snow = Vector2i(1,1)


func _ready() -> void:
	noise.noise_type = FastNoiseLite.TYPE_PERLIN
	noise.seed = randi()
	noise.frequency = 0.03
	noise.domain_warp_amplitude = 1.0
	
	
	view_distance = (chunk_size / 2) - 1
	last_player_pos = player.position
    preload_surrounding_chunks(0, 0)
	player.position = Vector2((chunk_size * tile_size) / 2, (chunk_size * tile_size) / 2)
	
	
	
	#update_visible_chunks()
	$AutoSave.start()
	load_chunk(0,0)

func preload_surrounding_chunks(center_x, center_y):
    for x in range(-1, 2):
        for y in range(-1, 2):
            var chunk_key = str(center_x + x) + "," + str(center_y + y)
            if not chunk_cache.has(chunk_key):
                chunk_load_queue.push_back(Vector2(center_x + x, center_y + y))


func load_chunk(x, y):
	var chunk_key = str(x) + "," + str(y)
    if chunk_cache.has(chunk_key):
        return
        
    # Generate chunk
    var cells = []
    for _x in range(chunk_size):
        for _y in range(chunk_size):
            var current_tile_position = Vector2i(_x+x*chunk_size, _y+y*chunk_size)
            var atlas_position = Vector2i()
            var id = noise.get_noise_2d(current_tile_position.x, current_tile_position.y)
            
            if id < -0.15:
                atlas_position = water
            elif id > 0.2:
                atlas_position = land
            else:
                atlas_position = snow
                
            cells.append({"pos": current_tile_position, "atlas": atlas_position})
    
    # Apply chunk
    for cell in cells:
        tile_set.set_cell(0, cell["pos"], 0, cell["atlas"])
    
    # Cache chunk
    chunk_cache[chunk_key] = cells
func _process(delta: float) -> void:
	var tile_cord = player_cord()
	$Cord.text = \"(%d,%d )\" % [tile_cord.x, tile_cord.y]
func _on_save_pressed() -> void:
	var date = str(Time.get_datetime_string_from_system())
	date = date.replace(\":\", \"-\")
	
func _physics_process(delta: float) -> void:
	var world_size = tile_set.get_used_rect() as Rect2i
	var world_size_start = world_size.position
	var world_size_end = world_size.end
	var player_position_positive = (player.position / tile_size) + Vector2(view_distance, view_distance)
	var player_position_negative = (player.position / tile_size) - Vector2(view_distance, view_distance)
	
	
	
	if player_position_positive.x > world_size_end.x:
		load_chunk(world_size_start.x+1, world_size_start.y)
	elif player_position_negative.x < world_size_start.x:
		load_chunk(world_size_start.x-1, world_size_start.y)
	if player_position_positive.y > world_size_end.y:
		load_chunk(world_size_start.x, world_size_start.y+1)
	elif player_position_negative.y < world_size_start.y:
		load_chunk(world_size_start.x, world_size_start.y-1)


	var player_movement = player.position - last_player_pos
    last_player_pos = player.position
    
    var chunk_x = int(player.position.x / (chunk_size * tile_size))
    var chunk_y = int(player.position.y / (chunk_size * tile_size))
    
    # Prioritize chunks in movement direction
    var direction = player_movement.normalized()
    var next_chunk = Vector2(
        chunk_x + sign(direction.x),
        chunk_y + sign(direction.y)
    )
    
    if not chunk_cache.has(str(next_chunk.x) + "," + str(next_chunk.y)):
        chunk_load_queue.push_front(next_chunk)
    
    # Process chunk queue
    while not chunk_load_queue.is_empty():
        var next_pos = chunk_load_queue.pop_front()
        load_chunk(next_pos.x, next_pos.y)
        break  # Only process one chunk per frame

		
	

func _on_auto_save_timeout() -> void:
	SaveManager.auto_save()
	pass # Replace with function body.

func player_cord():
	var cord = $TileMap.local_to_map($PLAYERS.global_position)
	var local_position = $TileMap.to_local(cord)
	return local_position
	pass

func _on_button_pressed(name) -> void:
	SaveManager.save_game(name)
	
	# In your Godot script

func _on_loading_pressed() -> void:
	var lod = SaveManagerRust.new()
	lod.load_player_pos(\"pk\",%PLAYERS )
	lod.print_world_name()
	pass 
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_p3ueq"]
noise_type = 3

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_1vwnx"]
noise = SubResource("FastNoiseLite_p3ueq")

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_51jcw"]
texture = ExtResource("1_cy2ln")
0:1/animation_columns = 1
0:1/0 = 0
0:11/animation_columns = 1
0:11/0 = 0
3:9/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_1urad"]
texture = ExtResource("2_tn3g8")
1:1/0 = 0

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_jw6bw"]
texture = ExtResource("3_7vh7w")
1:1/0 = 0
1:1/0/z_index = 1

[sub_resource type="TileSet" id="TileSet_goddv"]
sources/0 = SubResource("TileSetAtlasSource_51jcw")
sources/1 = SubResource("TileSetAtlasSource_1urad")
sources/2 = SubResource("TileSetAtlasSource_jw6bw")

[node name="World" type="Node2D"]
position = Vector2(-1, 0)
script = SubResource("GDScript_ixdq0")
noise_texture = SubResource("NoiseTexture2D_1vwnx")

[node name="TileMap" type="TileMapLayer" parent="."]
tile_set = SubResource("TileSet_goddv")

[node name="coin" parent="." instance=ExtResource("3_q1b1f")]
position = Vector2(65, 0)

[node name="coin2" parent="." instance=ExtResource("3_q1b1f")]
position = Vector2(123, 0)

[node name="PLAYERS" parent="." instance=ExtResource("4_dqyd3")]
unique_name_in_owner = true
position = Vector2(0, 25)

[node name="coin3" parent="." instance=ExtResource("3_q1b1f")]
position = Vector2(42.1139, 9.49407)

[node name="coin4" parent="." instance=ExtResource("3_q1b1f")]
position = Vector2(88, 20)

[node name="Control" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_right = 40.0
offset_bottom = 40.0
metadata/_edit_use_anchors_ = true

[node name="TouchControls" parent="Control" instance=ExtResource("4_dd45r")]

[node name="MultiplayerSpawner" type="MultiplayerSpawner" parent="."]
spawn_path = NodePath("..")

[node name="AutoSave" type="Timer" parent="."]
wait_time = 5.0
autostart = true

[node name="FPSCOUNTER" type="Label" parent="."]
texture_filter = 1
offset_top = 26.0
offset_right = 40.0
offset_bottom = 49.0
script = ExtResource("5_dged2")

[node name="Player2" type="Player" parent="."]
position = Vector2(-108, -52.5)
scale = Vector2(0.1875, 0.179688)
texture = ExtResource("7_6ip7a")

[node name="Cord" type="Label" parent="."]
offset_right = 40.0
offset_bottom = 23.0

[node name="Button" type="Button" parent="."]
offset_left = 25.0
offset_top = 45.0
offset_right = 68.0
offset_bottom = 76.0
text = "save"

[node name="SaveManagerRust" type="SaveManagerRust" parent="."]

[node name="loading" type="Button" parent="."]
offset_left = -87.0
offset_top = 55.0
offset_right = -21.0
offset_bottom = 86.0
text = "loading"

[connection signal="timeout" from="AutoSave" to="." method="_on_auto_save_timeout"]
[connection signal="pressed" from="Button" to="." method="_on_button_pressed"]
[connection signal="pressed" from="loading" to="." method="_on_loading_pressed"]
